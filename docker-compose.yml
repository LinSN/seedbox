version: "3.7"

services:
    # rutorrent:
    #     image: crazymax/rtorrent-rutorrent
    #     container_name: rutorrent
    #     restart: always
    #     environment:
    #         - PGID=${PGID}
    #         - PUID=${PUID}
    #         - TZ=${TZ}
    #     volumes:
    #         - configrutorrent:/config
    #         - downloads:/downloads
    #     ports:
    #         - 5000:5000
    #         - 51413:51413
    #         - 6881:6881/udp
    #     labels:
    #         - "traefik.enable=true"
    #         - "traefik.http.routers.rutorrent.rule=Host(`rutorrent.${TRAEFIK_DOMAIN}`)"
    #         - "traefik.http.routers.rutorrent.middlewares=common-auth@file"
    #         - "traefik.port=80"
        
    transmission:
        image: lscr.io/linuxserver/transmission
        container_name: transmission
        environment:
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
            - TRANSMISSION_WEB_HOME=/flood-for-transmission/ #optional
        volumes:
            - configtransmission:/config
            - downloads:/downloads
        ports:
            - 9091:9091
            - 51413:51413
            - 51413:51413/udp
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.transmission.rule=Host(`transmission.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.transmission.middlewares=common-auth@file"
        restart: unless-stopped

    plex:
        image: linuxserver/plex
        container_name: plex
        restart: always
        ports:
            - "32400:32400"
            - "32400:32400/udp"
        volumes:
            - configplex:/config
            - downloads:/downloads
        environment:
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
            - VERSION=docker
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.plex.loadbalancer.server.port=32400"
            - "traefik.http.routers.plex.rule=Host(`plex.${TRAEFIK_DOMAIN}`)"
    # emby:
    #     image: lscr.io/linuxserver/emby
    #     container_name: emby
    #     environment:
    #         - PGID=${PGID}
    #         - PUID=${PUID}
    #         - TZ=${TZ}
    #     volumes:
    #         - configemby:/config
    #         - downloads:/downloads
    #     ports:
    #     - 8096:8096
    #     restart: unless-stopped
    
    sonarr:
        image: linuxserver/sonarr:develop
        container_name: sonarr
        restart: always
        volumes:
            - configsonarr:/config
            - downloads:/downloads
            - /etc/localtime:/etc/localtime:ro
        environment:
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.sonarr.rule=Host(`sonarr.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.sonarr.middlewares=common-auth@file"

    radarr:
        image: linuxserver/radarr:develop
        container_name: radarr
        restart: always
        volumes:
            - configradarr:/config
            - downloads:/downloads
            - /etc/localtime:/etc/localtime:ro
        environment:
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.radarr.rule=Host(`radarr.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.radarr.middlewares=common-auth@file"

    bazarr:
        image: linuxserver/bazarr
        container_name: bazarr
        restart: always
        volumes:
            - configbazarr:/config
            - downloads:/downloads
        environment:
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.bazarr.rule=Host(`bazarr.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.bazarr.middlewares=common-auth@file"

    lidarr:
        image: linuxserver/lidarr:develop
        container_name: lidarr
        restart: always
        volumes:
            - configlidarr:/config
            - downloads:/downloads
        environment:
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.lidarr.rule=Host(`lidarr.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.lidarr.middlewares=common-auth@file"

    tautulli:
        image: linuxserver/tautulli
        container_name: tautulli
        restart: always
        volumes:
            - configtautulli:/config
            - config:/logs:ro # Inside of tautulli, bind to logs via "/logs/Plex Media Server/Logs"
        environment:
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.tautulli.rule=Host(`tautulli.${TRAEFIK_DOMAIN}`)"

    portainer:
        image: portainer/portainer-ce
        container_name: portainer
        restart: always
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        command: --admin-password ${PORTAINER_ADMIN_PASSWORD} --host=unix:///var/run/docker.sock
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.portainer.rule=Host(`portainer.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.services.portainer-seedbox.loadbalancer.server.port=9000"

    # netdata:
    #     image: netdata/netdata
    #     restart: always
    #     container_name: netdata
    #     hostname: netdata.${TRAEFIK_DOMAIN}
    #     environment:
    #         PGID: 999
    #     cap_add:
    #         - SYS_PTRACE
    #     security_opt:
    #         - apparmor:unconfined
    #     volumes:
    #         - /proc:/host/proc:ro
    #         - /sys:/host/sys:ro
    #         - /var/run/docker.sock:/var/run/docker.sock:rw
    #     labels:
    #         - "traefik.enable=true"
    #         - "traefik.http.routers.netdata.rule=Host(`netdata.${TRAEFIK_DOMAIN}`)"
    #         - "traefik.http.routers.netdata.middlewares=common-auth@file"

    flaresolverr:
        # DockerHub mirror flaresolverr/flaresolverr:latest
        image: ghcr.io/flaresolverr/flaresolverr:latest
        container_name: flaresolverr
        environment:
        # Used to change the verbosity of the logging
        - LOG_LEVEL=info
        # Enables hcaptcha-solver => https://github.com/JimmyLaurent/hcaptcha-solver
        - CAPTCHA_SOLVER=hcaptcha-solver
        # Enables CaptchaHarvester => https://github.com/NoahCardoza/CaptchaHarvester
        # - CAPTCHA_SOLVER=harvester
        # - HARVESTER_ENDPOINT=https://127.0.0.1:5000/token
        ports:
        - 8191:8191
        restart: unless-stopped 
    
    # duplicati:
    #     image: linuxserver/duplicati
    #     container_name: duplicati
    #     restart: unless-stopped
    #     environment:
    #         - PUID=${PUID}
    #         - PGID=${PGID}
    #         - TZ=${TZ}
    #     volumes:
    #         - configduplicati:/config
    #         - backups:/backups
    #         - alldata:/source
    #     labels:
    #         - "traefik.enable=true"
    #         - "traefik.http.routers.duplicati.rule=Host(`duplicati.${TRAEFIK_DOMAIN}`)"
    #         - "traefik.http.routers.duplicati.middlewares=common-auth@file"

    # filebrowser:
    #     image: hurlenko/filebrowser
    #     container_name: filebrowser
    #     restart: unless-stopped
    #     volumes:
    #         - downloads:/data
    #         - configfilebrowser:/config
    #     environment:
    #         - PUID=${PUID}
    #         - PGID=${PGID}
    #     labels:
    #         - "traefik.enable=true"
    #         - "traefik.http.routers.filebrowser.rule=Host(`filebrowser.${TRAEFIK_DOMAIN}`)"
    prowlarr:
        image: ghcr.io/linuxserver/prowlarr:develop
        container_name: prowlarr
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - configprowlarr:/config
        
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.${TRAEFIK_DOMAIN}`)"
    # filestash:
    #     image: machines/filestash
    #     container_name: filestash
    #     ports:
    #         - 8334:8334
    #     restart: always
    #     labels:
    #         - "traefik.enable=true"
    #         - "traefik.http.routers.filestash.rule=Host(`filestash.${TRAEFIK_DOMAIN}`)"
    #         - "traefik.http.services.filestash.loadbalancer.server.port=8334"


    # samba:
    #     image: dperson/samba
    #     container_name: samba
    #     environment:
    #         - PUID=${PUID}
    #         - PGID=${PGID}
    #     ports:
    #         - "137:137/udp"
    #         - "138:138/udp"
    #         - "139:139/tcp"
    #         - "445:445/tcp"
    #     restart: unless-stopped
    #     volumes:
    #         - /data/downloads/:/library:z
    #     command: '-s "library;/library"  -u "linsn;linsnpassword123456789" -p'
    #     labels:
    #         - "traefik.enable=true"
    #         - "traefik.http.routers.samba.rule=Host(`samba.${TRAEFIK_DOMAIN}`)"
        

networks: 
  default: 
    external:
      name: "traefik-network"

volumes:
    alldata:
        driver: local-persist
        driver_opts:
            mountpoint: /data
    config:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config
    configplex:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/Plex
    configsonarr: 
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/sonarr
    configradarr: 
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/radarr
    configbazarr:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/bazarr
    configlidarr:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/lidarr
    configdeluge: 
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/deluge
    configrutorrent: 
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/rutorrent
    configtransmission: 
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/transmission
    configtautulli:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/tautulli
    configduplicati:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/duplicati
    configfilebrowser:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/filebrowser
    configprowlarr:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/prowlarr
    # configemby:
    #     driver: local-persist
    #     driver_opts:
    #         mountpoint: /data/config/emby
    downloads:
        driver: local-persist
        driver_opts:
            mountpoint: /data/downloads/
    backups:
        driver: local-persist
        driver_opts:
            mountpoint: /mnt/save
