services:   
    traefik:
        image: traefik
        container_name: traefik
        restart: always
        command: 
            - --certificatesresolvers.le.acme.email=${ACME_MAIL}
            - --certificatesresolvers.le.acme.httpchallenge=true
            - --certificatesresolvers.le.acme.httpchallenge.entrypoint=insecure
              #  - --pilot.token=${PILOT_TOKEN}
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./traefik:/etc/traefik:ro
            - configtraefik:/config
        environment:
            - TRAEFIK_DOMAIN=${TRAEFIK_DOMAIN}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            # Docker labels for enabling Traefik dashboard
            - "traefik.http.routers.traefik.rule=Host(`traefik.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.traefik.service=api@internal"
            - "traefik.http.routers.traefik.middlewares=google-oauth@file"
            - "traefik.http.routers.traefik.entrypoints=secure"
            - "traefik.http.routers.traefik.tls.certresolver=le"
    
    forward-auth:
        image: thomseddon/traefik-forward-auth:latest
        container_name: forward-auth
        environment:
        - PROVIDERS_GOOGLE_CLIENT_ID=${PROVIDERS_GOOGLE_CLIENT_ID}
        - PROVIDERS_GOOGLE_CLIENT_SECRET=${PROVIDERS_GOOGLE_CLIENT_SECRET}
        - SECRET=${SECRET}
        - COOKIE_DOMAIN=linsn.work
        - DEFAULT_PROVIDER=google
        - AUTH_HOST=traefik.linsn.work
        - WHITELIST=slimaninordine@gmail.com  # Specify the email to whitelist
        - LOG_LEVEL=debug
        - CSRF_COOKIE_NAME=_forward_auth_csrf
        - CSRF_COOKIE_SECURE=true
        - CSRF_COOKIE_HTTP_ONLY=true
        - CSRF_COOKIE_SAME_SITE=Lax
        restart: always
        labels:
             # Route pour /_oauth sans middleware
            - "traefik.http.routers.forward-oauth.rule=Host(`traefik.${TRAEFIK_DOMAIN}`) && PathPrefix(`/_oauth`)"
            - "traefik.http.routers.forward-oauth.service=forward-auth"
            - "traefik.http.services.forward-oauth.loadbalancer.server.port=4181"
            - "traefik.http.routers.forward-oauth.entrypoints=secure"
            - "traefik.http.routers.forward-oauth.tls.certresolver=le"
            
    wireguard:
        image: linuxserver/wireguard:latest
        container_name: wireguard
        cap_add:
          - NET_ADMIN
          - SYS_MODULE
        volumes:
          - configwireguard:/config           # place your ProtonVPN wg0.conf inside this folder
          - /lib/modules:/lib/modules:ro
        environment:
          - TZ=${TZ}
        sysctls:
          - net.ipv4.conf.all.src_valid_mark=1
        restart: unless-stopped

    transmission:
        image: lscr.io/linuxserver/transmission
        container_name: transmission
        network_mode: "service:wireguard"
        restart: unless-stopped
        environment:
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
            # - TRANSMISSION_WEB_HOME=/config/flood            # optionnel
            # --- Sécurité RPC ---
            - WHITELIST=192.168.*,10.*,172.*                      # RPC accessible seulement depuis ton LAN
        # --- Divers ---
            - PEERPORT=51413                                # fixe le port bittorrent
        volumes:
            - configtransmission:/config
            - downloads:/downloads

        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.transmission.rule=Host(`transmission.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.transmission.entrypoints=secure"
            - "traefik.http.routers.transmission.tls.certresolver=le"
            - "traefik.http.routers.transmission.middlewares=google-oauth@file,security-headers@file"
            - "traefik.http.services.transmission.loadbalancer.server.port=9091"

    plex:
        image: linuxserver/plex
        container_name: plex
        restart: always
        ports:
            - "32400:32400"
            - "32400:32400/udp"
        volumes:
            - configplex:/config
            - downloads:/downloads
        environment:
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
            - VERSION=docker
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.plex.loadbalancer.server.port=32400"
            - "traefik.http.routers.plex.rule=Host(`plex.${TRAEFIK_DOMAIN}`)"

    sonarr:
        image: linuxserver/sonarr:develop
        container_name: sonarr
        restart: always
        volumes:
            - configsonarr:/config
            - downloads:/downloads
            - /etc/localtime:/etc/localtime:ro
        environment:
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.sonarr.rule=Host(`sonarr.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.sonarr.middlewares=google-oauth@file,security-headers@file"

    radarr:
        image: linuxserver/radarr:develop
        container_name: radarr
        restart: always
        volumes:
            - configradarr:/config
            - downloads:/downloads
            - /etc/localtime:/etc/localtime:ro
        environment:
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.radarr.rule=Host(`radarr.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.radarr.middlewares=google-oauth@file,security-headers@file"

    bazarr:
        image: linuxserver/bazarr
        container_name: bazarr
        restart: always
        volumes:
            - configbazarr:/config
            - downloads:/downloads
        environment:
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.bazarr.rule=Host(`bazarr.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.bazarr.middlewares=google-oauth@file,security-headers@file"

    lidarr:
        image: linuxserver/lidarr:develop
        container_name: lidarr
        restart: always
        volumes:
            - configlidarr:/config
            - downloads:/downloads
        environment:
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.lidarr.rule=Host(`lidarr.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.lidarr.middlewares=google-oauth@file,security-headers@file"

    tautulli:
        image: linuxserver/tautulli
        container_name: tautulli
        restart: always
        volumes:
            - configtautulli:/config
            - config:/logs:ro # Inside of tautulli, bind to logs via "/logs/Plex Media Server/Logs"
        environment:
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.tautulli.rule=Host(`tautulli.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.tautulli.middlewares=google-oauth@file,security-headers@file"


    portainer:
        image: portainer/portainer-ce
        container_name: portainer
        restart: always
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - configportainer:/data  # Ajout d'un volume persistant pour les données Portainer
        environment:
        - PORTAINER_ADMIN_PASSWORD=${PORTAINER_ADMIN_PASSWORD}  # Définissez cette variable dans votre .env
        command: --admin-password ${PORTAINER_ADMIN_PASSWORD} --host=unix:///var/run/docker.sock
        labels:
        - "traefik.enable=true"
        - "traefik.http.routers.portainer.rule=Host(`portainer.${TRAEFIK_DOMAIN}`)"
        - "traefik.http.routers.portainer.entrypoints=secure"
        - "traefik.http.routers.portainer.tls.certresolver=le"
        - "traefik.http.routers.portainer.middlewares=google-oauth@file,security-headers@file"
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    
    prowlarr:
        image: ghcr.io/linuxserver/prowlarr:develop
        container_name: prowlarr
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - configprowlarr:/config
        
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.prowlarr.middlewares=google-oauth@file,security-headers@file"

    flood:
        image: jesec/flood              # UI web seule (mode proxy)
        container_name: flood
        restart: unless-stopped
        environment:
            - HOME=/config                 # où Flood stockera sa DB (sessions, prefs…)
            - PGID=${PGID}
            - PUID=${PUID}
            - TZ=${TZ}
        volumes:
            - configflood:/config         # volume persistant
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.flood.rule=Host(`flood.${TRAEFIK_DOMAIN}`)"
            - "traefik.http.routers.flood.middlewares=google-oauth@file,security-headers@file"
            - "traefik.http.services.flood.loadbalancer.server.port=3000"

    # ombi:
    #     image: lscr.io/linuxserver/ombi:latest
    #     container_name: ombi
    #     environment:
    #         - PUID=${PUID}
    #         - PGID=${PGID}
    #         - TZ=${TZ}
    #     volumes:
    #         - configombi:/config   
    #     labels:
    #         - "traefik.enable=true"
    #         - "traefik.http.routers.ombi.rule=Host(`ombi.${TRAEFIK_DOMAIN}`)"
    #         - "traefik.http.routers.ombi.middlewares=security-headers@file"

    # flaresolverr:
    #     # DockerHub mirror flaresolverr/flaresolverr:latest
    #     image: 21hsmw/flaresolverr:nodriver
    #     container_name: flaresolverr
    #     environment:
    #         # Used to change the verbosity of the logging
    #         - LOG_LEVEL=info
    #         - DRIVER=nodriver
    #         - HOST=localhost
    #         # Enables hcaptcha-solver => https://github.com/JimmyLaurent/hcaptcha-solver
    #         - CAPTCHA_SOLVER=hcaptcha-solver
    #         # Enables CaptchaHarvester => https://github.com/NoahCardoza/CaptchaHarvester
    #         # - CAPTCHA_SOLVER=harvester
    #         # - HARVESTER_ENDPOINT=https://127.0.0.1:5000/token
    #     ports:
    #     - 8191:8191
    #     restart: unless-stopped 

networks: 
  default: 
    external: true
    name: "traefik-network"

volumes:
    alldata:
        driver: local-persist
        driver_opts:
            mountpoint: /data
    config:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config
    configtraefik:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/traefik
    configplex:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/Plex
    configsonarr: 
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/sonarr
    configradarr: 
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/radarr
    configbazarr:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/bazarr
    configlidarr:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/lidarr
    configtransmission: 
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/transmission
    configtautulli:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/tautulli
    configprowlarr:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/prowlarr
    configportainer:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/portainer
    configombi:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/ombi
    configwireguard:
      driver: local-persist
      driver_opts:
          mountpoint: /data/config/wireguard
    configflood:
        driver: local-persist
        driver_opts:
            mountpoint: /data/config/flood
    downloads:
        driver: local-persist
        driver_opts:
            mountpoint: /data/downloads/
